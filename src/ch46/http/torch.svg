<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)
	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)
	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)
	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)
	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}
		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;
		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}
	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;
		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;
		unzoombtn.classList.remove("hide");
		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;
		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;
			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;
			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";
				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";
		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="374.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="357" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="357" > </text>
<g id="frames">
<g >
<title>runtime.(*mcache).nextFree (3 samples, 2.46%)</title><rect x="39.0" y="181" width="29.0" height="15.0" fill="rgb(211,159,24)" rx="2" ry="2" />
<text  x="42.02" y="191.5" >ru..</text>
</g>
<g >
<title>runtime.signalM (1 samples, 0.82%)</title><rect x="899.8" y="229" width="9.7" height="15.0" fill="rgb(206,223,43)" rx="2" ry="2" />
<text  x="902.84" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (1 samples, 0.82%)</title><rect x="39.0" y="133" width="9.7" height="15.0" fill="rgb(245,135,47)" rx="2" ry="2" />
<text  x="42.02" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan (2 samples, 1.64%)</title><rect x="87.4" y="245" width="19.3" height="15.0" fill="rgb(239,89,8)" rx="2" ry="2" />
<text  x="90.38" y="255.5" ></text>
</g>
<g >
<title>runtime.lock (2 samples, 1.64%)</title><rect x="590.3" y="245" width="19.4" height="15.0" fill="rgb(254,132,18)" rx="2" ry="2" />
<text  x="593.33" y="255.5" ></text>
</g>
<g >
<title>runtime.wakep (1 samples, 0.82%)</title><rect x="619.3" y="245" width="9.7" height="15.0" fill="rgb(221,90,26)" rx="2" ry="2" />
<text  x="622.34" y="255.5" ></text>
</g>
<g >
<title>runtime.signalM (17 samples, 13.93%)</title><rect x="735.4" y="213" width="164.4" height="15.0" fill="rgb(223,177,35)" rx="2" ry="2" />
<text  x="738.41" y="223.5" >runtime.signalM</text>
</g>
<g >
<title>runtime.(*mcentral).freeSpan (2 samples, 1.64%)</title><rect x="87.4" y="261" width="19.3" height="15.0" fill="rgb(232,144,29)" rx="2" ry="2" />
<text  x="90.38" y="271.5" ></text>
</g>
<g >
<title>runtime.signalM (2 samples, 1.64%)</title><rect x="716.1" y="197" width="19.3" height="15.0" fill="rgb(229,111,48)" rx="2" ry="2" />
<text  x="719.07" y="207.5" ></text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.82%)</title><rect x="609.7" y="197" width="9.6" height="15.0" fill="rgb(234,193,28)" rx="2" ry="2" />
<text  x="612.67" y="207.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.82%)</title><rect x="619.3" y="213" width="9.7" height="15.0" fill="rgb(230,14,32)" rx="2" ry="2" />
<text  x="622.34" y="223.5" ></text>
</g>
<g >
<title>runtime.makeslice (4 samples, 3.28%)</title><rect x="29.3" y="213" width="38.7" height="15.0" fill="rgb(245,110,26)" rx="2" ry="2" />
<text  x="32.34" y="223.5" >run..</text>
</g>
<g >
<title>runtime.mSysStatInc (1 samples, 0.82%)</title><rect x="97.0" y="181" width="9.7" height="15.0" fill="rgb(232,64,34)" rx="2" ry="2" />
<text  x="100.05" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (3 samples, 2.46%)</title><rect x="39.0" y="149" width="29.0" height="15.0" fill="rgb(245,199,25)" rx="2" ry="2" />
<text  x="42.02" y="159.5" >ru..</text>
</g>
<g >
<title>runtime.gcBgMarkWorker (16 samples, 13.11%)</title><rect x="106.7" y="309" width="154.8" height="15.0" fill="rgb(223,220,49)" rx="2" ry="2" />
<text  x="109.72" y="319.5" >runtime.gcBgMarkWor..</text>
</g>
<g >
<title>runtime.nanotime (2 samples, 1.64%)</title><rect x="1170.7" y="309" width="19.3" height="15.0" fill="rgb(239,94,54)" rx="2" ry="2" />
<text  x="1173.66" y="319.5" ></text>
</g>
<g >
<title>runtime.scanframeworker (2 samples, 1.64%)</title><rect x="184.1" y="165" width="19.3" height="15.0" fill="rgb(241,42,50)" rx="2" ry="2" />
<text  x="187.10" y="175.5" ></text>
</g>
<g >
<title>runtime.mallocgc (4 samples, 3.28%)</title><rect x="29.3" y="197" width="38.7" height="15.0" fill="rgb(232,8,20)" rx="2" ry="2" />
<text  x="32.34" y="207.5" >run..</text>
</g>
<g >
<title>runtime.getStackMap (2 samples, 1.64%)</title><rect x="184.1" y="149" width="19.3" height="15.0" fill="rgb(206,9,25)" rx="2" ry="2" />
<text  x="187.10" y="159.5" ></text>
</g>
<g >
<title>runtime.sysmon (9 samples, 7.38%)</title><rect x="629.0" y="277" width="87.1" height="15.0" fill="rgb(220,210,40)" rx="2" ry="2" />
<text  x="632.02" y="287.5" >runtime.sy..</text>
</g>
<g >
<title>runtime.wakep (2 samples, 1.64%)</title><rect x="571.0" y="261" width="19.3" height="15.0" fill="rgb(236,205,21)" rx="2" ry="2" />
<text  x="573.98" y="271.5" ></text>
</g>
<g >
<title>runtime.gcMarkTermination.func4 (1 samples, 0.82%)</title><rect x="909.5" y="277" width="9.7" height="15.0" fill="rgb(249,20,4)" rx="2" ry="2" />
<text  x="912.51" y="287.5" ></text>
</g>
<g >
<title>runtime.(*fixalloc).alloc (1 samples, 0.82%)</title><rect x="39.0" y="37" width="9.7" height="15.0" fill="rgb(205,19,34)" rx="2" ry="2" />
<text  x="42.02" y="47.5" ></text>
</g>
<g >
<title>runtime.startm (2 samples, 1.64%)</title><rect x="571.0" y="245" width="19.3" height="15.0" fill="rgb(235,190,51)" rx="2" ry="2" />
<text  x="573.98" y="255.5" ></text>
</g>
<g >
<title>runtime.nanotime1 (4 samples, 3.28%)</title><rect x="271.1" y="229" width="38.7" height="15.0" fill="rgb(213,191,44)" rx="2" ry="2" />
<text  x="274.15" y="239.5" >run..</text>
</g>
<g >
<title>runtime.casgstatus (1 samples, 0.82%)</title><rect x="261.5" y="277" width="9.6" height="15.0" fill="rgb(207,150,13)" rx="2" ry="2" />
<text  x="264.48" y="287.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (2 samples, 1.64%)</title><rect x="716.1" y="245" width="19.3" height="15.0" fill="rgb(227,63,37)" rx="2" ry="2" />
<text  x="719.07" y="255.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (4 samples, 3.28%)</title><rect x="126.1" y="245" width="38.7" height="15.0" fill="rgb(235,117,38)" rx="2" ry="2" />
<text  x="129.07" y="255.5" >run..</text>
</g>
<g >
<title>runtime.notetsleep (1 samples, 0.82%)</title><rect x="909.5" y="245" width="9.7" height="15.0" fill="rgb(252,101,16)" rx="2" ry="2" />
<text  x="912.51" y="255.5" ></text>
</g>
<g >
<title>runtime.stopm (17 samples, 13.93%)</title><rect x="377.5" y="245" width="164.5" height="15.0" fill="rgb(216,193,21)" rx="2" ry="2" />
<text  x="380.54" y="255.5" >runtime.stopm</text>
</g>
<g >
<title>runtime.kevent (3 samples, 2.46%)</title><rect x="348.5" y="229" width="29.0" height="15.0" fill="rgb(221,207,44)" rx="2" ry="2" />
<text  x="351.52" y="239.5" >ru..</text>
</g>
<g >
<title>runtime.schedule (1 samples, 0.82%)</title><rect x="609.7" y="245" width="9.6" height="15.0" fill="rgb(205,186,19)" rx="2" ry="2" />
<text  x="612.67" y="255.5" ></text>
</g>
<g >
<title>runtime.gcDrain (17 samples, 13.93%)</title><rect x="735.4" y="261" width="164.4" height="15.0" fill="rgb(234,136,12)" rx="2" ry="2" />
<text  x="738.41" y="271.5" >runtime.gcDrain</text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.82%)</title><rect x="909.5" y="213" width="9.7" height="15.0" fill="rgb(249,188,53)" rx="2" ry="2" />
<text  x="912.51" y="223.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_wait (17 samples, 13.93%)</title><rect x="377.5" y="197" width="164.5" height="15.0" fill="rgb(226,77,48)" rx="2" ry="2" />
<text  x="380.54" y="207.5" >runtime.pthread_cond_..</text>
</g>
<g >
<title>runtime.gentraceback (3 samples, 2.46%)</title><rect x="174.4" y="197" width="29.0" height="15.0" fill="rgb(234,3,31)" rx="2" ry="2" />
<text  x="177.43" y="207.5" >ru..</text>
</g>
<g >
<title>runtime.sweepone (3 samples, 2.46%)</title><rect x="77.7" y="293" width="29.0" height="15.0" fill="rgb(250,20,1)" rx="2" ry="2" />
<text  x="80.70" y="303.5" >ru..</text>
</g>
<g >
<title>runtime.resettimer (1 samples, 0.82%)</title><rect x="68.0" y="293" width="9.7" height="15.0" fill="rgb(222,221,23)" rx="2" ry="2" />
<text  x="71.03" y="303.5" ></text>
</g>
<g >
<title>runtime.preemptall (1 samples, 0.82%)</title><rect x="899.8" y="245" width="9.7" height="15.0" fill="rgb(233,102,19)" rx="2" ry="2" />
<text  x="902.84" y="255.5" ></text>
</g>
<g >
<title>runtime.greyobject (1 samples, 0.82%)</title><rect x="251.8" y="229" width="9.7" height="15.0" fill="rgb(244,18,50)" rx="2" ry="2" />
<text  x="254.80" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocMSpanLocked (1 samples, 0.82%)</title><rect x="39.0" y="53" width="9.7" height="15.0" fill="rgb(226,224,30)" rx="2" ry="2" />
<text  x="42.02" y="63.5" ></text>
</g>
<g >
<title>all (122 samples, 100%)</title><rect x="10.0" y="325" width="1180.0" height="15.0" fill="rgb(245,221,17)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>runtime.markroot (4 samples, 3.28%)</title><rect x="164.8" y="245" width="38.6" height="15.0" fill="rgb(230,126,3)" rx="2" ry="2" />
<text  x="167.75" y="255.5" >run..</text>
</g>
<g >
<title>main.createFBS (6 samples, 4.92%)</title><rect x="10.0" y="245" width="58.0" height="15.0" fill="rgb(212,6,13)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >main.c..</text>
</g>
<g >
<title>runtime.pthread_cond_signal (2 samples, 1.64%)</title><rect x="571.0" y="197" width="19.3" height="15.0" fill="rgb(217,82,20)" rx="2" ry="2" />
<text  x="573.98" y="207.5" ></text>
</g>
<g >
<title>runtime.startTheWorldWithSema (25 samples, 20.49%)</title><rect x="919.2" y="261" width="241.8" height="15.0" fill="rgb(241,153,5)" rx="2" ry="2" />
<text  x="922.18" y="271.5" >runtime.startTheWorldWithSema</text>
</g>
<g >
<title>runtime.notetsleep_internal (1 samples, 0.82%)</title><rect x="909.5" y="229" width="9.7" height="15.0" fill="rgb(206,0,39)" rx="2" ry="2" />
<text  x="912.51" y="239.5" ></text>
</g>
<g >
<title>runtime.mstart (56 samples, 45.90%)</title><rect x="629.0" y="309" width="541.7" height="15.0" fill="rgb(226,170,17)" rx="2" ry="2" />
<text  x="632.02" y="319.5" >runtime.mstart</text>
</g>
<g >
<title>runtime.write1 (2 samples, 1.64%)</title><rect x="542.0" y="229" width="19.3" height="15.0" fill="rgb(212,116,23)" rx="2" ry="2" />
<text  x="544.97" y="239.5" ></text>
</g>
<g >
<title>runtime.netpoll (7 samples, 5.74%)</title><rect x="309.8" y="245" width="67.7" height="15.0" fill="rgb(241,95,32)" rx="2" ry="2" />
<text  x="312.84" y="255.5" >runtime..</text>
</g>
<g >
<title>runtime.scanstack (3 samples, 2.46%)</title><rect x="174.4" y="213" width="29.0" height="15.0" fill="rgb(245,97,49)" rx="2" ry="2" />
<text  x="177.43" y="223.5" >ru..</text>
</g>
<g >
<title>net/http.(*ServeMux).ServeHTTP (6 samples, 4.92%)</title><rect x="10.0" y="277" width="58.0" height="15.0" fill="rgb(225,177,25)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >net/ht..</text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (16 samples, 13.11%)</title><rect x="106.7" y="277" width="154.8" height="15.0" fill="rgb(224,78,51)" rx="2" ry="2" />
<text  x="109.72" y="287.5" >runtime.gcBgMarkWor..</text>
</g>
<g >
<title>runtime.findObject (1 samples, 0.82%)</title><rect x="242.1" y="229" width="9.7" height="15.0" fill="rgb(248,43,27)" rx="2" ry="2" />
<text  x="245.13" y="239.5" ></text>
</g>
<g >
<title>net/http.(*conn).serve (6 samples, 4.92%)</title><rect x="10.0" y="309" width="58.0" height="15.0" fill="rgb(232,97,40)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >net/ht..</text>
</g>
<g >
<title>runtime.forEachP (1 samples, 0.82%)</title><rect x="909.5" y="261" width="9.7" height="15.0" fill="rgb(252,121,40)" rx="2" ry="2" />
<text  x="912.51" y="271.5" ></text>
</g>
<g >
<title>runtime.gcstopm (1 samples, 0.82%)</title><rect x="609.7" y="229" width="9.6" height="15.0" fill="rgb(237,103,9)" rx="2" ry="2" />
<text  x="612.67" y="239.5" ></text>
</g>
<g >
<title>runtime.kevent (25 samples, 20.49%)</title><rect x="919.2" y="229" width="241.8" height="15.0" fill="rgb(206,224,11)" rx="2" ry="2" />
<text  x="922.18" y="239.5" >runtime.kevent</text>
</g>
<g >
<title>runtime.netpoll (25 samples, 20.49%)</title><rect x="919.2" y="245" width="241.8" height="15.0" fill="rgb(250,190,41)" rx="2" ry="2" />
<text  x="922.18" y="255.5" >runtime.netpoll</text>
</g>
<g >
<title>runtime.gopreempt_m (4 samples, 3.28%)</title><rect x="590.3" y="277" width="38.7" height="15.0" fill="rgb(243,28,5)" rx="2" ry="2" />
<text  x="593.33" y="287.5" >run..</text>
</g>
<g >
<title>runtime.notetsleep (2 samples, 1.64%)</title><rect x="629.0" y="261" width="19.4" height="15.0" fill="rgb(220,127,52)" rx="2" ry="2" />
<text  x="632.02" y="271.5" ></text>
</g>
<g >
<title>runtime.pthread_kill (2 samples, 1.64%)</title><rect x="716.1" y="181" width="19.3" height="15.0" fill="rgb(210,88,27)" rx="2" ry="2" />
<text  x="719.07" y="191.5" ></text>
</g>
<g >
<title>runtime.gcDrain (15 samples, 12.30%)</title><rect x="116.4" y="261" width="145.1" height="15.0" fill="rgb(245,125,1)" rx="2" ry="2" />
<text  x="119.39" y="271.5" >runtime.gcDrain</text>
</g>
<g >
<title>runtime.(*mheap).allocSpan (1 samples, 0.82%)</title><rect x="39.0" y="69" width="9.7" height="15.0" fill="rgb(221,153,38)" rx="2" ry="2" />
<text  x="42.02" y="79.5" ></text>
</g>
<g >
<title>runtime.schedule (33 samples, 27.05%)</title><rect x="271.1" y="277" width="319.2" height="15.0" fill="rgb(207,11,24)" rx="2" ry="2" />
<text  x="274.15" y="287.5" >runtime.schedule</text>
</g>
<g >
<title>runtime.write (1 samples, 0.82%)</title><rect x="68.0" y="229" width="9.7" height="15.0" fill="rgb(228,67,20)" rx="2" ry="2" />
<text  x="71.03" y="239.5" ></text>
</g>
<g >
<title>runtime.nanotime (4 samples, 3.28%)</title><rect x="271.1" y="245" width="38.7" height="15.0" fill="rgb(246,107,15)" rx="2" ry="2" />
<text  x="274.15" y="255.5" >run..</text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.82%)</title><rect x="619.3" y="181" width="9.7" height="15.0" fill="rgb(214,140,45)" rx="2" ry="2" />
<text  x="622.34" y="191.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (4 samples, 3.28%)</title><rect x="590.3" y="261" width="38.7" height="15.0" fill="rgb(220,52,9)" rx="2" ry="2" />
<text  x="593.33" y="271.5" >run..</text>
</g>
<g >
<title>runtime.scanobject (6 samples, 4.92%)</title><rect x="203.4" y="245" width="58.1" height="15.0" fill="rgb(242,159,6)" rx="2" ry="2" />
<text  x="206.44" y="255.5" >runtim..</text>
</g>
<g >
<title>runtime.stopTheWorldWithSema (1 samples, 0.82%)</title><rect x="1161.0" y="277" width="9.7" height="15.0" fill="rgb(221,80,16)" rx="2" ry="2" />
<text  x="1163.98" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (3 samples, 2.46%)</title><rect x="39.0" y="165" width="29.0" height="15.0" fill="rgb(223,185,8)" rx="2" ry="2" />
<text  x="42.02" y="175.5" >ru..</text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (17 samples, 13.93%)</title><rect x="735.4" y="229" width="164.4" height="15.0" fill="rgb(251,169,29)" rx="2" ry="2" />
<text  x="738.41" y="239.5" >runtime.(*gcControlle..</text>
</g>
<g >
<title>runtime.(*gcWork).balance (17 samples, 13.93%)</title><rect x="735.4" y="245" width="164.4" height="15.0" fill="rgb(206,154,40)" rx="2" ry="2" />
<text  x="738.41" y="255.5" >runtime.(*gcWork).bal..</text>
</g>
<g >
<title>runtime.(*mspan).sweep (2 samples, 1.64%)</title><rect x="87.4" y="277" width="19.3" height="15.0" fill="rgb(233,50,34)" rx="2" ry="2" />
<text  x="90.38" y="287.5" ></text>
</g>
<g >
<title>runtime.(*lfstack).pop (1 samples, 0.82%)</title><rect x="126.1" y="197" width="9.6" height="15.0" fill="rgb(219,224,13)" rx="2" ry="2" />
<text  x="129.07" y="207.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (2 samples, 1.64%)</title><rect x="716.1" y="229" width="19.3" height="15.0" fill="rgb(208,211,52)" rx="2" ry="2" />
<text  x="719.07" y="239.5" ></text>
</g>
<g >
<title>runtime.deductSweepCredit (2 samples, 1.64%)</title><rect x="48.7" y="133" width="19.3" height="15.0" fill="rgb(212,176,7)" rx="2" ry="2" />
<text  x="51.69" y="143.5" ></text>
</g>
<g >
<title>runtime.newstack (4 samples, 3.28%)</title><rect x="590.3" y="293" width="38.7" height="15.0" fill="rgb(248,116,51)" rx="2" ry="2" />
<text  x="593.33" y="303.5" >run..</text>
</g>
<g >
<title>runtime.getempty (1 samples, 0.82%)</title><rect x="126.1" y="213" width="9.6" height="15.0" fill="rgb(210,95,32)" rx="2" ry="2" />
<text  x="129.07" y="223.5" ></text>
</g>
<g >
<title>runtime.scanstack.func1 (2 samples, 1.64%)</title><rect x="184.1" y="181" width="19.3" height="15.0" fill="rgb(208,225,48)" rx="2" ry="2" />
<text  x="187.10" y="191.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).free (1 samples, 0.82%)</title><rect x="87.4" y="181" width="9.6" height="15.0" fill="rgb(240,4,6)" rx="2" ry="2" />
<text  x="90.38" y="191.5" ></text>
</g>
<g >
<title>runtime.semawakeup (2 samples, 1.64%)</title><rect x="571.0" y="213" width="19.3" height="15.0" fill="rgb(206,15,38)" rx="2" ry="2" />
<text  x="573.98" y="223.5" ></text>
</g>
<g >
<title>runtime.asyncPreempt (1 samples, 0.82%)</title><rect x="19.7" y="213" width="9.6" height="15.0" fill="rgb(220,196,12)" rx="2" ry="2" />
<text  x="22.67" y="223.5" ></text>
</g>
<g >
<title>runtime.nanotime (2 samples, 1.64%)</title><rect x="629.0" y="245" width="19.4" height="15.0" fill="rgb(245,10,9)" rx="2" ry="2" />
<text  x="632.02" y="255.5" ></text>
</g>
<g >
<title>runtime.notesleep (17 samples, 13.93%)</title><rect x="377.5" y="229" width="164.5" height="15.0" fill="rgb(228,15,54)" rx="2" ry="2" />
<text  x="380.54" y="239.5" >runtime.notesleep</text>
</g>
<g >
<title>runtime.pthread_kill (17 samples, 13.93%)</title><rect x="735.4" y="197" width="164.4" height="15.0" fill="rgb(219,204,17)" rx="2" ry="2" />
<text  x="738.41" y="207.5" >runtime.pthread_kill</text>
</g>
<g >
<title>runtime.semawakeup (1 samples, 0.82%)</title><rect x="619.3" y="197" width="9.7" height="15.0" fill="rgb(251,226,0)" rx="2" ry="2" />
<text  x="622.34" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpanLocked (2 samples, 1.64%)</title><rect x="87.4" y="197" width="19.3" height="15.0" fill="rgb(230,221,19)" rx="2" ry="2" />
<text  x="90.38" y="207.5" ></text>
</g>
<g >
<title>net/http.serverHandler.ServeHTTP (6 samples, 4.92%)</title><rect x="10.0" y="293" width="58.0" height="15.0" fill="rgb(232,185,26)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >net/ht..</text>
</g>
<g >
<title>runtime.systemstack (2 samples, 1.64%)</title><rect x="87.4" y="229" width="19.3" height="15.0" fill="rgb(242,58,41)" rx="2" ry="2" />
<text  x="90.38" y="239.5" ></text>
</g>
<g >
<title>runtime.mstart1 (9 samples, 7.38%)</title><rect x="629.0" y="293" width="87.1" height="15.0" fill="rgb(241,189,45)" rx="2" ry="2" />
<text  x="632.02" y="303.5" >runtime.ms..</text>
</g>
<g >
<title>runtime.findfunc (1 samples, 0.82%)</title><rect x="174.4" y="181" width="9.7" height="15.0" fill="rgb(218,82,46)" rx="2" ry="2" />
<text  x="177.43" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (1 samples, 0.82%)</title><rect x="39.0" y="85" width="9.7" height="15.0" fill="rgb(213,182,0)" rx="2" ry="2" />
<text  x="42.02" y="95.5" ></text>
</g>
<g >
<title>runtime.findrunnable (30 samples, 24.59%)</title><rect x="271.1" y="261" width="290.2" height="15.0" fill="rgb(238,124,31)" rx="2" ry="2" />
<text  x="274.15" y="271.5" >runtime.findrunnable</text>
</g>
<g >
<title>runtime.wakeNetPoller (1 samples, 0.82%)</title><rect x="68.0" y="245" width="9.7" height="15.0" fill="rgb(240,22,12)" rx="2" ry="2" />
<text  x="71.03" y="255.5" ></text>
</g>
<g >
<title>runtime.semasleep (1 samples, 0.82%)</title><rect x="1161.0" y="229" width="9.7" height="15.0" fill="rgb(218,213,21)" rx="2" ry="2" />
<text  x="1163.98" y="239.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (2 samples, 1.64%)</title><rect x="716.1" y="261" width="19.3" height="15.0" fill="rgb(252,44,6)" rx="2" ry="2" />
<text  x="719.07" y="271.5" ></text>
</g>
<g >
<title>runtime.pthread_kill (1 samples, 0.82%)</title><rect x="899.8" y="213" width="9.7" height="15.0" fill="rgb(240,112,43)" rx="2" ry="2" />
<text  x="902.84" y="223.5" ></text>
</g>
<g >
<title>runtime.usleep (7 samples, 5.74%)</title><rect x="648.4" y="261" width="67.7" height="15.0" fill="rgb(235,127,25)" rx="2" ry="2" />
<text  x="651.36" y="271.5" >runtime..</text>
</g>
<g >
<title>runtime.park_m (34 samples, 27.87%)</title><rect x="261.5" y="293" width="328.8" height="15.0" fill="rgb(249,127,2)" rx="2" ry="2" />
<text  x="264.48" y="303.5" >runtime.park_m</text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (17 samples, 13.93%)</title><rect x="735.4" y="277" width="164.4" height="15.0" fill="rgb(232,137,35)" rx="2" ry="2" />
<text  x="738.41" y="287.5" >runtime.gcBgMarkWorke..</text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (2 samples, 1.64%)</title><rect x="716.1" y="277" width="19.3" height="15.0" fill="rgb(219,96,42)" rx="2" ry="2" />
<text  x="719.07" y="287.5" ></text>
</g>
<g >
<title>runtime.nanotime1 (2 samples, 1.64%)</title><rect x="1170.7" y="293" width="19.3" height="15.0" fill="rgb(220,19,7)" rx="2" ry="2" />
<text  x="1173.66" y="303.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.82%)</title><rect x="609.7" y="213" width="9.6" height="15.0" fill="rgb(250,203,54)" rx="2" ry="2" />
<text  x="612.67" y="223.5" ></text>
</g>
<g >
<title>runtime.bgsweep (3 samples, 2.46%)</title><rect x="77.7" y="309" width="29.0" height="15.0" fill="rgb(223,157,13)" rx="2" ry="2" />
<text  x="80.70" y="319.5" >ru..</text>
</g>
<g >
<title>runtime.nanotime1 (2 samples, 1.64%)</title><rect x="629.0" y="229" width="19.4" height="15.0" fill="rgb(220,191,15)" rx="2" ry="2" />
<text  x="632.02" y="239.5" ></text>
</g>
<g >
<title>runtime.forEachP (1 samples, 0.82%)</title><rect x="899.8" y="261" width="9.7" height="15.0" fill="rgb(227,51,43)" rx="2" ry="2" />
<text  x="902.84" y="271.5" ></text>
</g>
<g >
<title>runtime.handoff (4 samples, 3.28%)</title><rect x="126.1" y="229" width="38.7" height="15.0" fill="rgb(214,12,33)" rx="2" ry="2" />
<text  x="129.07" y="239.5" >run..</text>
</g>
<g >
<title>runtime.systemstack (47 samples, 38.52%)</title><rect x="716.1" y="293" width="454.6" height="15.0" fill="rgb(253,220,6)" rx="2" ry="2" />
<text  x="719.07" y="303.5" >runtime.systemstack</text>
</g>
<g >
<title>net/http.HandlerFunc.ServeHTTP (6 samples, 4.92%)</title><rect x="10.0" y="261" width="58.0" height="15.0" fill="rgb(206,34,49)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >net/ht..</text>
</g>
<g >
<title>runtime.startm (1 samples, 0.82%)</title><rect x="619.3" y="229" width="9.7" height="15.0" fill="rgb(212,69,46)" rx="2" ry="2" />
<text  x="622.34" y="239.5" ></text>
</g>
<g >
<title>runtime.gcStart.func2 (25 samples, 20.49%)</title><rect x="919.2" y="277" width="241.8" height="15.0" fill="rgb(247,120,51)" rx="2" ry="2" />
<text  x="922.18" y="287.5" >runtime.gcStart.func2</text>
</g>
<g >
<title>runtime.pthread_cond_signal (1 samples, 0.82%)</title><rect x="609.7" y="181" width="9.6" height="15.0" fill="rgb(217,70,1)" rx="2" ry="2" />
<text  x="612.67" y="191.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (1 samples, 0.82%)</title><rect x="1161.0" y="213" width="9.7" height="15.0" fill="rgb(235,1,34)" rx="2" ry="2" />
<text  x="1163.98" y="223.5" ></text>
</g>
<g >
<title>runtime.nanotime1 (1 samples, 0.82%)</title><rect x="561.3" y="245" width="9.7" height="15.0" fill="rgb(247,148,20)" rx="2" ry="2" />
<text  x="564.31" y="255.5" ></text>
</g>
<g >
<title>runtime.(*pallocBits).summarize (1 samples, 0.82%)</title><rect x="87.4" y="149" width="9.6" height="15.0" fill="rgb(244,166,53)" rx="2" ry="2" />
<text  x="90.38" y="159.5" ></text>
</g>
<g >
<title>runtime.addInitializedTimer (1 samples, 0.82%)</title><rect x="68.0" y="261" width="9.7" height="15.0" fill="rgb(223,59,30)" rx="2" ry="2" />
<text  x="71.03" y="271.5" ></text>
</g>
<g >
<title>runtime.systemstack (16 samples, 13.11%)</title><rect x="106.7" y="293" width="154.8" height="15.0" fill="rgb(250,176,31)" rx="2" ry="2" />
<text  x="109.72" y="303.5" >runtime.systemstack</text>
</g>
<g >
<title>runtime.markroot.func1 (3 samples, 2.46%)</title><rect x="174.4" y="229" width="29.0" height="15.0" fill="rgb(253,131,50)" rx="2" ry="2" />
<text  x="177.43" y="239.5" >ru..</text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.82%)</title><rect x="39.0" y="101" width="9.7" height="15.0" fill="rgb(254,133,28)" rx="2" ry="2" />
<text  x="42.02" y="111.5" ></text>
</g>
<g >
<title>runtime.semasleep (17 samples, 13.93%)</title><rect x="377.5" y="213" width="164.5" height="15.0" fill="rgb(225,132,47)" rx="2" ry="2" />
<text  x="380.54" y="223.5" >runtime.semasleep</text>
</g>
<g >
<title>runtime.(*mheap).alloc (1 samples, 0.82%)</title><rect x="39.0" y="117" width="9.7" height="15.0" fill="rgb(251,144,11)" rx="2" ry="2" />
<text  x="42.02" y="127.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (1 samples, 0.82%)</title><rect x="1161.0" y="245" width="9.7" height="15.0" fill="rgb(234,125,43)" rx="2" ry="2" />
<text  x="1163.98" y="255.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.82%)</title><rect x="561.3" y="261" width="9.7" height="15.0" fill="rgb(226,84,51)" rx="2" ry="2" />
<text  x="564.31" y="271.5" ></text>
</g>
<g >
<title>runtime.notewakeup (2 samples, 1.64%)</title><rect x="571.0" y="229" width="19.3" height="15.0" fill="rgb(226,48,8)" rx="2" ry="2" />
<text  x="573.98" y="239.5" ></text>
</g>
<g >
<title>runtime.procyield (2 samples, 1.64%)</title><rect x="590.3" y="229" width="19.4" height="15.0" fill="rgb(222,44,51)" rx="2" ry="2" />
<text  x="593.33" y="239.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_timedwait_relative_np (1 samples, 0.82%)</title><rect x="909.5" y="197" width="9.7" height="15.0" fill="rgb(229,23,14)" rx="2" ry="2" />
<text  x="912.51" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan.func1 (2 samples, 1.64%)</title><rect x="87.4" y="213" width="19.3" height="15.0" fill="rgb(212,60,53)" rx="2" ry="2" />
<text  x="90.38" y="223.5" ></text>
</g>
<g >
<title>runtime.write1 (1 samples, 0.82%)</title><rect x="68.0" y="213" width="9.7" height="15.0" fill="rgb(242,104,42)" rx="2" ry="2" />
<text  x="71.03" y="223.5" ></text>
</g>
<g >
<title>runtime.bgscavenge (1 samples, 0.82%)</title><rect x="68.0" y="309" width="9.7" height="15.0" fill="rgb(252,211,25)" rx="2" ry="2" />
<text  x="71.03" y="319.5" ></text>
</g>
<g >
<title>main.GetFibonacciSerie (6 samples, 4.92%)</title><rect x="10.0" y="229" width="58.0" height="15.0" fill="rgb(240,94,39)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >main.G..</text>
</g>
<g >
<title>runtime.write (2 samples, 1.64%)</title><rect x="542.0" y="245" width="19.3" height="15.0" fill="rgb(228,42,54)" rx="2" ry="2" />
<text  x="544.97" y="255.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (2 samples, 1.64%)</title><rect x="716.1" y="213" width="19.3" height="15.0" fill="rgb(232,158,12)" rx="2" ry="2" />
<text  x="719.07" y="223.5" ></text>
</g>
<g >
<title>runtime.modtimer (1 samples, 0.82%)</title><rect x="68.0" y="277" width="9.7" height="15.0" fill="rgb(251,16,48)" rx="2" ry="2" />
<text  x="71.03" y="287.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func1 (1 samples, 0.82%)</title><rect x="899.8" y="277" width="9.7" height="15.0" fill="rgb(244,136,11)" rx="2" ry="2" />
<text  x="902.84" y="287.5" ></text>
</g>
<g >
<title>runtime.memmove (3 samples, 2.46%)</title><rect x="135.7" y="213" width="29.1" height="15.0" fill="rgb(246,80,2)" rx="2" ry="2" />
<text  x="138.74" y="223.5" >ru..</text>
</g>
<g >
<title>runtime.morestack (4 samples, 3.28%)</title><rect x="590.3" y="309" width="38.7" height="15.0" fill="rgb(218,190,41)" rx="2" ry="2" />
<text  x="593.33" y="319.5" >run..</text>
</g>
<g >
<title>runtime.notetsleep (1 samples, 0.82%)</title><rect x="1161.0" y="261" width="9.7" height="15.0" fill="rgb(226,26,9)" rx="2" ry="2" />
<text  x="1163.98" y="271.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).update (1 samples, 0.82%)</title><rect x="87.4" y="165" width="9.6" height="15.0" fill="rgb(242,14,28)" rx="2" ry="2" />
<text  x="90.38" y="175.5" ></text>
</g>
<g >
<title>runtime.mcall (34 samples, 27.87%)</title><rect x="261.5" y="309" width="328.8" height="15.0" fill="rgb(224,188,9)" rx="2" ry="2" />
<text  x="264.48" y="319.5" >runtime.mcall</text>
</g>
</g>
</svg>
